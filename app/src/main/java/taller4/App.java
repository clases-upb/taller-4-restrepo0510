/*
 * This source file was generated by the Gradle 'init' task
 */
package taller4;

import java.util.Random;

public class App {
    

    public static void main(String[] args) {
        
        try {
            //punto 1
            System.out.println(num_impar(100));
            //punto 2
            System.out.println(n_fibonacci(7));
            // punto 3
            Random random = new Random();
            int veces = random.nextInt(11) + 20;
            System.out.println(veces);

            for (int i = 0; i < veces; i++) {
                double resultado = raizc_aleo();

                System.out.println(resultado);
            }

            // punto 4
            System.out.println(n_generados(10, 100));
            // punto 5 
            System.out.println(suma_ramdom(56));
            // punto 6
            System.out.println(simularSorteo());
        } catch (Exception e) {

        }

    }

    

    /* TODAS LAS FUNCIONES DEBEN LLEVAR CONTROL DE ERRORES, SI EL ENUNCIADO NO LO ESPECIFICA, LO DEBES PONER
     * DE ACUERDO CON TU CRITERIO
     */

    /* 
     * 1.	Escriba una función que reciba un entero positivo entre 100 y 500 y retorne en un texto todos los números impares desde 1 
     * hasta ese número separados por comas en grupos de hasta 8 números.
     * 
    */
    public static String num_impar(int nro){
        try {
            if (nro < 100 || nro > 500) {
                return "incoreecto";
            }
        
            String resultado = "";  
            int contador = 0;  
        
            for (int n = 1; n <= nro; n = n + 2) {
                resultado = resultado + n;
                contador = contador + 1;
        
                if (n < nro - 1) {
                    resultado = resultado + ", ";
                }
        
                
            }
        
            return resultado;

        
        } catch (Exception e) {

        return "error";

        }
    }

    /* 2. 	Escriba una función que reciba un entero N mayor de 2  y retorne un string cono esos N términos de la 
    serie de Fibonacci (La sucesión de Fibonacci se trata de una serie infinita de números naturales que empieza con un 0 y un 1 
    y continúa añadiendo números que son la suma de los dos anteriores: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 
    987, 1597…)
     * 
     * 
    */
    public static String n_fibonacci(int nro) {
        try {
            int first = 0;
            int second = 1;
            String resultado = first + ", " + second;

            if (nro <= 2) {
                return "no valido";
            }

            for (int number = 2; number <= nro; number++) {
                int next_n = first + second;

                resultado = resultado + ", " + next_n;
                first = second;
                second = next_n;
            }
            return resultado;

        } catch (Exception e) {
            return "error";
        }
    }


    /* 
     * 3.	Diseñar y desarrollar una función que NO reciba datos de entrada, genere aleatoriamente un número entre 2 y 355, 
       le calcule su raíz cuadrada y retorne este valor. Para calcular las raíces usar la función Sqrt de la biblioteca Math.

       En el main, antes de invocar la función, se debe calcular un aleatorio entre 20 y 30 el cual establecerá la cantidad 
       de veces que va a llamar a la función y en un ciclo, mostrar los resultados.

    */

public static double raizc_aleo() {
        try {
            Random random = new Random();
            int numero = random.nextInt(355) + 2;
            return Math.sqrt(numero);

        } catch (Exception e) {
            return -1;
        }

    }


    /*4.	Diseñar y desarrollar una función que reciba un valor inicial y un valor final, para generar 900 números aleatorios 
        en este rango y retorne un texto que diga cuántos números pares fueron generados. Controle que el nro inicial sea menor que 
        nro final para establecer el rango.

        Llame la función desde el main e imprimir el resultado arrojado.
    */

public static int n_generados(int nro_initial, int nro_end) {
        try {

            if (nro_initial >= nro_end) {
                return -1;
            }

            Random rand = new Random();
            int n_pares = 0;

            for (int i = 0; i < 900; i++) {
                int nro_rdm = rand.nextInt(nro_end - nro_initial + 1) + nro_initial;
                if (nro_rdm % 2 == 0) {
                    n_pares++;
                }
            }

            return n_pares;

        } catch (Exception e) {
            return -1;
        }
    }



    /* 5.	Diseñar y desarrollar una función que calcule una cantidad de números aleatorios que viene como parámetro de entrada 
        y los sume.  La función deberá retornar el total de la suma. Usted defina los rangos que va a usar en el cálculo.

        Llame la función desde el main e imprimir el resultado arrojado.

      
    */
public static int suma_ramdom(int cant) {
        try {
            Random rand = new Random();
            int suma = 0;
            int rang_1 = 56;
            int rang_2 = 200;

            for (int nro_c = 0; nro_c < cant; nro_c++) {
                int numeroAleatorio = rand.nextInt(rang_2 - rang_1 + 1) + rang_1;
                suma += numeroAleatorio;
            }

            return suma;
        } catch (Exception e) {

            return -1;
        }
    }


    /* 6.	Se requiere una función para simular el sorteo de una lotería, de acuerdo con las siguientes condiciones:

            La lotería tiene 20 premios. 

            Cada premio que calcula el programa debe tener el número de 4 cifras entre 0000 y 9999 acompañado de la serie 
            que es un número entre 100 y 150.

            Ejemplo: 5698-101

            Cada premio lo debe imprimir el programa de la siguiente forma (n representa un número cualquiera):

            Sorteo # nn - Número Premiado nnnn - Serie nnn

            Ejm: Sorteo # 19  - Número Premiado 5698 - Serie 101

            Para tener en cuenta la forma en la cual se informan los 20 resultados: 

            Del premio 20 al 6 el programa imprime: 

            ======PREMIOS MENORES=======
            y la lista de los 15 premios 

            Del premio 5 al 2 el programa imprime:
            ======PREMIOS SECOS=========
            y la lista de los 4 premios secos

            AL llegar al premio 1, el programa imprime:
            ======Premio mayor==========
            Y el premio mayor

            Nota: para sacar el premio mayor calcule el random por cada número, como lo hacen en la realidad los sorteos.

            La función no recibe parámetros y devuelve un string con toda la lista de premios. El main, invoca la función 
            e imprime el resultado que esta arroje. 


     * 
     * 
    */
public static String simularSorteo() {
        StringBuilder resultado = new StringBuilder();
        Random random = new Random();

        resultado.append("======PREMIOS MENORES=======\n");
        for (int pr_m = 20; pr_m >= 6; pr_m--) {
            int numeroPremiado = random.nextInt(10000); 
            int serie = random.nextInt(51) + 100;      
            resultado.append(String.format("Sorteo # %02d - Número Premiado %04d - Serie %03d\n", pr_m, numeroPremiado, serie));
        }

       
        resultado.append("======PREMIOS SECOS=========\n");
        for (int pr_s = 5; pr_s >= 2; pr_s--) {
            int numeroPremiado = random.nextInt(10000); 
            int serie = random.nextInt(51) + 100;      
            resultado.append(String.format("Sorteo # %02d - Número Premiado %04d - Serie %03d\n", pr_s, numeroPremiado, serie));
        }

    
        resultado.append("======Premio mayor==========\n");
        int numeroPremiado = random.nextInt(10000);     
        int serie = random.nextInt(51) + 100;           
        resultado.append(String.format("Sorteo # 01 - Número Premiado %04d - Serie %03d\n", numeroPremiado, serie));

        return resultado.toString(); 
    }
}
